name: Testing

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front/
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
      - name: Build app
        run: npm ci
      - name: Install
        run: npm install
      - name: Build and test
        run: |
          npm run build --if-present
          npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
      - name: Jest coverage report
        uses: actions/upload-artifact@v4
        with:
          name: Jest code coverage
          path: ./front/coverage/bobapp
  test-backend:
    runs-on: ubuntu-latest
    defaults: 
      run:
        working-directory: ./back/
    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn clean install
      - name: Run tests and generate Jacoco report
        run: mvn test jacoco:report
      - name: Jacoco coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: JaCoCo code coverage
          path: ./back/target/site/jacoco/

  code_quality:
    name: Code quality analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
      - name: Build app
        working-directory: ./front/
        run: npm ci
      - name: Install
        working-directory: ./front/
        run: npm install
      - name: Build and run test
        working-directory: ./front/
        run: |
          npm run build --if-present
          npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        working-directory: ./back/
        run: mvn clean install
            
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: |
            echo " Code quality analysis"

  docker_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/back
    steps:
        - uses: actions/checkout@v4
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Build and push docker images backend
          uses: docker/build-push-action@v5
          with:
            context: ./back
            file: ./back/Dockerfile
            push: true
            tags: ${{ vars.DOCKERHUB_USERNAME }}/bobapp-back:latest
        - name: Build and push docker images front end
          uses: docker/build-push-action@v5
          with:
            context: ./front
            file: ./front/Dockerfile
            push: true
            tags: ${{ vars.DOCKERHUB_USERNAME }}/bobapp-front:latest
